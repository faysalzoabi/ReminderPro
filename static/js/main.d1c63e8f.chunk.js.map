{"version":3,"sources":["store/actions.jsx","store/coonstants.js","components/ReminderInput.jsx","components/ItemsList.jsx","App.js","serviceWorker.js","store/reducer.jsx","store/index.jsx","index.js"],"names":["addReminder","text","duedate","action","type","payload","console","log","deleteReminder","id","clearReminders","ReminderInput","state","handleChange","event","_this","setState","target","value","handleDateChange","props","dispatch","react_default","a","createElement","Row","className","Col","md","Form","FormGroup","controlId","ControlLabel","FormControl","placeholder","onChange","this","Button","block","bsStyle","onClick","Component","connect","reminders","ItemsList","handleDelete","_this2","ListGroup","map","reminder","ListGroupItem","key","moment","Date","fromNow","App","Grid","components_ReminderInput","components_ItemsList","Boolean","window","location","hostname","match","initState","Math","floor","random","reducer","arguments","length","undefined","read_cookie","concat","Object","toConsumableArray","bake_cookie","objectSpread","filter","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAEaA,EAAc,SAACC,EAAMC,GAC9B,IAAMC,EAAS,CACXC,KCJoB,eDKpBC,QAAQJ,EACRC,QAASA,GAGb,OADAI,QAAQC,IAAI,qBAAsBJ,GAC3BA,GAGEK,EAAiB,SAACC,GAK3B,MAJe,CACXL,KCbuB,kBDcvBC,QAASI,IAKJC,EAAiB,WAC1B,MAAO,CACHN,KCpBuB,oBCGzBO,6MAEJC,MAAQ,CACNX,KAAK,GACLC,QAAQ,MAGVW,aAAe,SAACC,GACdC,EAAKC,SAAS,CACbf,KAAQa,EAAMG,OAAOC,WAIxBC,iBAAmB,SAACL,GAClBC,EAAKC,SAAS,CACZd,QAASY,EAAMG,OAAOC,WAI1BlB,YAAc,WACZe,EAAKK,MAAMC,SAASrB,EAAYe,EAAKH,MAAMX,KAAMc,EAAKH,MAAMV,aAG9DQ,eAAiB,WACfK,EAAKK,MAAMC,SAASX,8EAIpB,OACEY,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,aACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,IACTN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACQP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAWC,UAAU,kBACjBT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KAAcV,EAAAC,EAAAC,cAAA,2BACVF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACI7B,KAAK,OACL8B,YAAY,kBACZC,SAAUC,KAAKvB,eAEjBS,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACI7B,KAAK,iBACL+B,SAAUC,KAAKjB,mBAEnBG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACAC,OAAK,EACLC,QAAQ,UACRb,UAAU,YACVc,QAASJ,KAAKpC,aAJd,gBASAsB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACAC,OAAK,EACLC,QAAQ,SACRb,UAAU,YACVc,QAASJ,KAAK1B,gBAJd,+BAvDA+B,aAiFbC,cANS,SAAC9B,GACrB,MAAM,CACJ+B,UAAW/B,EAAM+B,YAIRD,CAAyB/B,+CChFlCiC,6MAEJC,aAAe,SAACpC,GACdM,EAAKK,MAAMC,SAASb,EAAeC,6EAG5B,IAAAqC,EAAAV,KACGO,EAAcP,KAAKhB,MAAnBuB,UAEV,OADErC,QAAQC,IAAI,QAAQ6B,KAAKhB,OAEzBE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,UAAU,aACXJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,IACLN,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KAEKJ,GAAaA,EAAUK,IAAI,SAAAC,GACxB,OACI3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAexB,UAAU,OAAOa,QAAQ,UAAUY,IAAKF,EAASxC,IAC5Da,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,WAAMyB,EAAShD,MACfqB,EAAAC,EAAAC,cAAA,WAAM4B,IAAO,IAAIC,KAAKJ,EAAS/C,UAAUoD,YAG7ChC,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQE,QAAQ,SAASb,UAAU,eAAec,QAAS,kBAAMM,EAAKD,aAAaI,EAASxC,MAA5F,wBAvBRgC,aA6CTC,cANS,SAAC9B,GACrB,MAAM,CACJ+B,UAAW/B,EAAM+B,YAIRD,CAAyBE,GC7BzBW,mLAXX,OACEjC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAM9B,UAAU,QACdJ,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,eARQjB,aCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+FCfAC,EAAY,CACdrB,UAAU,IAGRM,EAAW,SAAC9C,GACd,MAAO,CACHF,KAAKE,EAAOE,QACZI,GAAIwD,KAAKC,MAAsB,GAAhBD,KAAKE,UACpBjE,QAASC,EAAOD,UAkCTkE,EA9BC,WAA6B,IAA5BxD,EAA4ByD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBL,EAAW7D,EAAWkE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrC5B,EAAY,KAEhB,OADA/B,EAAM+B,UAAY6B,sBAAY,aACvBrE,EAAOC,MACV,ILnBoB,eKsBhB,OAFAuC,EAAS,GAAA8B,OAAAC,OAAAC,EAAA,EAAAD,CAAO9D,EAAM+B,WAAb,CAAwBM,EAAS9C,KAC1CyE,sBAAY,YAAajC,GACzB+B,OAAAG,EAAA,EAAAH,CAAA,GACO9D,EADP,CAEI+B,cAER,ILzBuB,kBK4BnB,OAFAA,EAAY/B,EAAM+B,UAAUmC,OAAO,SAAA7B,GAAQ,OAAI9C,EAAOE,UAAY4C,EAASxC,KAC3EmE,sBAAY,YAAajC,GAClB+B,OAAAG,EAAA,EAAAH,CAAA,GACA9D,EADP,CAEI+B,cAER,IL/BuB,kBKkCnB,OAFAA,EAAY,GACZiC,sBAAY,YAAajC,GACzB+B,OAAAG,EAAA,EAAAH,CAAA,GACO9D,EADP,CAEI+B,cAEZ,QACI,OAAO/B,ICnCAmE,EAFDC,YAAYZ,GCI1Ba,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAUJ,MAAOA,GAAOzD,EAAAC,EAAAC,cAAC4D,EAAD,OAAoBC,SAASC,eAAe,SHyH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d1c63e8f.chunk.js","sourcesContent":["import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from './coonstants';\n\nexport const addReminder = (text, duedate) => {\n    const action = {\n        type:ADD_REMINDER,\n        payload:text,\n        duedate: duedate\n    }\n    console.log('action in reminder', action)\n    return action\n}\n\nexport const deleteReminder = (id) => {\n    const action = {\n        type:DELETE_REMINDER,\n        payload: id\n    }\n    return action\n}\n\nexport const clearReminders = () => {\n    return {\n        type:CLEAR_REMINDERS\n    }\n}","export const ADD_REMINDER = 'ADD_REMINDER'\nexport const DELETE_REMINDER = 'DELETE_REMINDER'\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS'","import React, { Component } from 'react'\nimport {Button, Collapse, Well, Form, Row, Col, FormGroup, ControlLabel, FormControl} from 'react-bootstrap'\nimport { connect } from 'react-redux';\nimport { addReminder, clearReminders } from '../store/actions'; \n\nclass ReminderInput extends Component {\n  \n  state = {\n    text:'',\n    duedate:''\n  }\n\n  handleChange = (event) => {\n    this.setState({ \n     text :  event.target.value\n    });\n  }\n\n  handleDateChange = (event) => {\n    this.setState({ \n      duedate: event.target.value  \n    });\n  }\n\n  addReminder = () => {\n    this.props.dispatch(addReminder(this.state.text, this.state.duedate))\n  }\n  \n  clearReminders = () => {\n    this.props.dispatch(clearReminders())\n  }\n\n  render() {\n    return (\n      <div>\n          <Row className=\"show-grid\">\n            <Col md={12}> \n            <Form>\n                    <FormGroup controlId=\"formInlineName\">\n                        <ControlLabel><h2>Reminder Pro</h2></ControlLabel>\n                            <FormControl\n                                type=\"text\"\n                                placeholder=\"Enter Your Item\"\n                                onChange={this.handleChange}\n                                />\n                              <br/>\n                            <FormControl\n                                type=\"datetime-local\"\n                                onChange={this.handleDateChange}\n                                />\n                            <br/>\n                            <Button\n                            block\n                            bsStyle=\"success\"\n                            className=\"btn-round\"\n                            onClick={this.addReminder}\n                            >\n                                Add Reminder\n                            </Button>\n\n                            <Button\n                            block\n                            bsStyle=\"danger\"\n                            className=\"btn-round\"\n                            onClick={this.clearReminders}\n                            >\n                                Clear Reminders\n                            </Button>\n                                           \n                    </FormGroup>\n            </Form>\n          \n            </Col>\n          </Row>\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n    return{\n      reminders: state.reminders\n    }\n}\n\nexport default connect(mapStateToProps)(ReminderInput)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport {ListGroup,ListGroupItem, Button, Grid, Collapse, Well, Form, Row, Col, FormGroup, ControlLabel, FormControl} from 'react-bootstrap'\nimport {deleteReminder} from '../store/actions'\nimport moment from 'moment'\n\nclass ItemsList extends Component {\n\n  handleDelete = (id) => {\n    this.props.dispatch(deleteReminder(id))\n  }\n\n  render() {\n      const { reminders } = this.props\n      console.log('props',this.props)\n    return (\n      <div>\n        <Row className=\"show-grid\">\n            <Col md={12}> \n                <ListGroup>\n                    {\n                     reminders && reminders.map(reminder => {\n                        return(\n                            <ListGroupItem className=\"item\" bsStyle=\"success\" key={reminder.id}>\n                                <div className=\"itemlist\">\n                                    <div>{reminder.text}</div>\n                                    <div>{moment(new Date(reminder.duedate)).fromNow()}</div>\n                                </div>\n                                \n                                <Button bsStyle=\"danger\" className=\"deletebutton\" onClick={() => this.handleDelete(reminder.id)}>Delete</Button>\n                            </ListGroupItem>\n                        )\n                    })\n                    \n                    }\n                </ListGroup>\n            </Col>\n        </Row>\n\n      </div>\n    )\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n    return{\n      reminders: state.reminders\n    }\n}\n\nexport default connect(mapStateToProps)(ItemsList)\n","import React, { Component } from 'react';\nimport './App.css';\nimport ReminderInput from './components/ReminderInput'\nimport {Grid} from 'react-bootstrap';\nimport ItemsList  from './components/ItemsList';\n\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div className=\"container \">\n        <Grid className=\"card\">\n          <ReminderInput/>\n          <ItemsList/>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from './coonstants';\nimport { bake_cookie, read_cookie} from 'sfcookies';\n\nconst initState = {\n    reminders:[]\n}\n\nconst reminder = (action) => {\n    return {\n        text:action.payload,\n        id: Math.floor(Math.random() * 10),\n        duedate: action.duedate\n    }\n}\n\nconst reducer = (state=initState, action) => {\n    let reminders = null\n    state.reminders = read_cookie('reminders')\n    switch(action.type){\n        case ADD_REMINDER:\n            reminders = [...state.reminders, reminder(action)]\n            bake_cookie('reminders', reminders)\n            return{\n                ...state,\n                reminders\n            }\n        case DELETE_REMINDER:\n            reminders = state.reminders.filter(reminder => action.payload !== reminder.id)\n            bake_cookie('reminders', reminders)\n            return {\n                ...state,\n                reminders\n            }\n        case CLEAR_REMINDERS:\n            reminders = []\n            bake_cookie('reminders', reminders)\n            return{\n                ...state,\n                reminders\n            }\n    default:\n        return state;\n    }\n}\n\nexport default reducer","import { createStore } from 'redux';\nimport reducer from \"./reducer\";\n\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  { Provider } from 'react-redux'\nimport store from './store/index';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}